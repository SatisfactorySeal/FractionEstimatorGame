/**
 * A class that generates fractions with values at most MAX_FRACTION_SPAN above a goal value that
 * exists between the constants MIN_DOUBLE and MAX_DOUBLE. 
 * 
 * This exists to encapsulate the functionality of generating random long variables with a specific
 * length in digits.
 */

import java.util.Random;

public class RandomFractionGenerator {
  private final double MIN_DOUBLE = 0.10;
  private final double MAX_DOUBLE = 0.80;
  private final double MAX_FRACTION_SPAN = 0.10;

  private Random random;
  private int denomSize;
  private double goalValue;

  {
    random = new Random();
  }

  /**
   * Constructor for RandomFractionGenerator
   * Creates the goalValue, which is a random value that fractions generated by the 
   * RandomFractionGenerator will be close to
   */
  public RandomFractionGenerator(int size) {
    if (size < 2 || size > 15) {
      throw new IllegalArgumentException("Denominator must be between 2 and 15 digits");
    }
    denomSize = size;
    goalValue = MIN_DOUBLE + (MAX_DOUBLE - MIN_DOUBLE) * random.nextDouble();
  }

  /** Generates the numerator and denominator for a fraction */
  public long[] generateFraction() {
    long[] fraction = new long[2];
    fraction[1] = getRandomLong();                      // denominator
    double actualValue = goalValue + MAX_FRACTION_SPAN * random.nextDouble();
    fraction[0] = (long) (fraction[1] * actualValue);   // numerator
    return fraction;
  }

  /** 
   * Generates a long with size of denomSize. This always represents a long that will go in the
   * denominator of the fraction. Random does not have a function for generating a long within a 
   * range, so this is used to guarantee a uniformly distributed long with the correct size.
   */
  private long getRandomLong() {
    // Generate the first digits (up to 9)
    int size = (denomSize <= 9) ? denomSize : 9;
    int firstPart = random.ints((int) Math.pow(10, size-1), (int) Math.pow(10, size))
      .findFirst()
      .getAsInt();

    // return immediately for denominator sizes between 2 and 9 inclusive
    if (denomSize <= 9) return (long) firstPart;

    // generate the final 1 to 6 digits by setting an upper bound of 10^(denominatorSize-9)
    long bound = (long) Math.pow(10, denomSize-9);
    return bound * (long) firstPart + (long) random.nextInt((int) bound);
  }
  
}
